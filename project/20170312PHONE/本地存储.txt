应用场景：
  自动登录
  记住用户名面
  “未登录”状态下的购物车
  只能支持一次
  登录成功后，在不同的页面都可以看到用户的基本信息
  ...

以上功能的实现都离不开本地存储，所谓的本地存储，就是把一些信息存储到客户端本地，常用的技术：
=>cookie
=>localStorage / sessionStorage

=>IndexedDb
=>webSQL
=>Cache Storage
=>Application Cache (下面这四个不常用)

以上这些存储方法存储的信息在谷歌浏览器的控制台中都可以一一查看到(Resources/Application)，而且还可以查看到具体的内容，都是采用明文存储的，所以一般要求本地存储的内容，不能存储太过于重要的信息，如果非要存储，重要的信息一定要进行加密处理：可逆转的加密(一般都是自己写加密规则)、不可以逆转的加密(一般用MD5)

===============================
本地存储，把一些信息存储到本地，并不是任何的浏览器或者网站都可以调取，例如：我在谷歌浏览器的京东下存储一些信息，那么在IE中获取不到，我在谷歌浏览器的百度域名下也得不到=>也就是本地存储受到浏览器和域的限制

===============================
cookie和localStorage的区别：

[cookie]
   ->兼容所有浏览器
   ->同源(同一个域)下最多只能存储4KB内容
   ->它有生命周期限制,一般我们有效存储时间设定一天(一个月也可以,自己可以设置)
   ->360清理垃圾或者浏览器的清理历史记录等功能，会把cookie清除掉
   ->用户可能出于安全的角度禁用COOKIE(无痕浏览器、隐私模式...)
   ->它不是严格的本地存储，当我们操作获取cookie的时候，cookie信息需要在客户端和服务器之间进行传输操作的

[localStorage]
   ->HTML5提供的新方法,不兼容IE低版本浏览器
   ->同源(同一个域)下最多只能存储5MB内容
   ->没有生命周期,永久存储在本地(当然我们可以根据需要清除)
   ->360那些东西的清理对它无效
   ->无痕浏览器和隐身模式对它无效
   ->它是严格的本地存储，和服务器没有任何的关系

记住用户名和密码、购物车、用户基本信息等，一般都存储在cookie中（移动端基本上也是这样）

localStorage应用不多，我们一般使用它做数据的优化：例如解决用户频繁刷新频繁向服务器发送请求，增加了服务器压力的情况
  第一次加载页面，向服务器发请求，把数据得到，然后使用模板字符串等方式展示在页面上，同时把本次的模板字符串和数据存储在本地一份，记录一下存储的时间
   '{time:xxx,data:'....'}'

  我们可以设置一分钟内不再重新向服务器发送请求：当我们在1MIN种内刷新页面，我们不发送AJAX请求，需要的数据在本地存储着呢，直接从本地获取，展示在页面中

  如果超过了1MIN在重新发请求给服务器，拿到最新数据后除了展示在页面中，把上一次存储的时间和信息进行替换
  ...

========================
document.cookie='[name]=[value]....'
console.log(document.cookie);

localStorage.setItem('name','zxt')
localStorage.getItem('name')
localStorage.removeItem('name')
localStorage.clear()
localStorage.key(0)

sessionStorage的用法和localStorage相同，但是它属于会话存储，浏览器关闭后，当前存储的信息自己就销毁了，我们网页中的实时聊天经常使用它来存储

========================