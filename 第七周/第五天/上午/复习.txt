1、在项目中我们需要使用AJAX从服务器端获取到数据，然后展示在页面中，实现局部刷新；
我在之前的项目中一般都使用的是异步，当然也可以设置成为同步
[同步]
当前这次数据如果没有请求成功，其它的事情都不能做
优点：在处理业务逻辑的时候可以保持一个良好的操作时序
弊端：当前请求的这件事情如果出现异常(请求时间过长、请求堵塞)，导致其他的事情也不能做了，浏览器处于卡死状态
AJAX串行
=>所以我们项目中基本上不采用同步

[异步]
当前这次数据如果没有请求成功，我们也可以继续去做其它的事情
优点：避免因为某一个请求耗时过长或者堵塞等问题导致的页面卡死，也是我在项目中最常用的
弊端：如果遇到1完成才能做2，2完成才能做3这样具有连贯性的操作的时候，我们不能向同步那样按顺序编写，需要进行特殊的处理

--------------------------------------------
我们想从服务器端获取数据(学生信息)，获取到的数据展示在页面中
var data=null;
$.ajax({
  url:'/getStudentList',
  method:'get',
  dataType:'json',//->把从服务器获取的数据，按照DATA TYPE的值，转变为我们需要的数据类型，json、text、xml...
  data:null,//->不管是使用GET还是POST,如果需要把一些内容传递给服务器,我们就把需要传递的内容放在DATA中，JQ在处理的时候，它自己会分请求的方式：GET请求的话会放在URL末尾,通过问号传递参数传递给服务器，如果是POST请求，会放在请求主体传递给服务器；DATA中传递的值可以是字符串也可以是对象，一般都用对象，如果传递的是对象，JQ也会把它先变为字符串(xxx=xxx&xxx=xxx...)然后再传递给服务器

  async:false,//->同步
  cache:false,//->如果当前的请求是GET，而且CACHE设置的是FALSE，它想要做的事情就是清除本次请求的缓存(在URL的末尾追加一个随机数)

  success:function(result){
     //->如果从服务器成功的把数据获取到执行这个回调函数，result就是我们从服务器获取的结果
     data=result;
  }
});

$.ajax({
  url:'/xxxx',
  data:data,//->上一次AJAX请求的结果将会在这一次使用
  async:false,
  success:function(){

  }
});
-------------------------------------------
$.ajax({
  url:'/task1',
  async:true,
  success:function(){

     $.ajax({
         url:'/task2',
         async:true,
         success:function(){

            $.ajax({
                url:'/task3',
                async:true,
                success:function(){

                }
            });

         }
     });
  }
});
->promise设计模式就是为了解决异步下的这个问题的
--------------------------------------------

6、xml和json的区别
都是存储数据用的,服务器返回给客户端的数据类型中大部分就是这两种(JSON格式的字符串/XML文档格式的数据)

xml:
<student>
  <name>张三</name>
  <age>26</age>
</student>
<student>
  <name>李四</name>
  <age>28</age>
</student>

JSON:
[
  {
    "name":"张三",
    "age":"26"
  },
  {
    "name":"李四",
    "age":"28"
  }
]

现在项目中，服务返回给我们的数据格式大部分都是JSON，因为JSON几乎支持所有的后台语言(所有的后语言都可以返回JSON格式的数据)；而且JSON格式的数据看上去清晰明了，处理起来也非常的简单，因为它就是一个数组和对象；更重要的是这中数据文件的大小比XML小很多，节约性能。

--------------------------------------------




















